From f4ac54ff911af8194b7cd44c1d2bdfcf8a7c00b6 Mon Sep 17 00:00:00 2001
From: Jan Chaloupka <jchaloup@redhat.com>
Date: Thu, 26 Mar 2015 10:44:35 +0100
Subject: [PATCH] pthread_kill.3 fix incorrect information about check for the 
 existence of a thread ID

---
 man-pages/man3/pthread_kill.3 | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

diff --git a/man-pages/man3/pthread_kill.3 b/man-pages/man3/pthread_kill.3
index e747b58..b4d60be 100644
--- a/man-pages/man3/pthread_kill.3
+++ b/man-pages/man3/pthread_kill.3
@@ -45,8 +45,7 @@ The signal is asynchronously directed to
 
 If
 .I sig
-is 0, then no signal is sent, but error checking is still performed;
-this can be used to check for the existence of a thread ID.
+is 0, then no signal is sent, but error checking is still performed.
 .SH RETURN VALUE
 On success,
 .BR pthread_kill ()
@@ -54,15 +53,10 @@ returns 0;
 on error, it returns an error number, and no signal is sent.
 .SH ERRORS
 .TP
-.B ESRCH
-No thread with the ID
-.I thread
-could be found.
-.TP
 .B EINVAL
 An invalid signal was specified.
 .SH CONFORMING TO
-POSIX.1-2001.
+POSIX.1-2008.
 .SH NOTES
 Signal dispositions are process-wide:
 if a signal handler is installed,
@@ -70,6 +64,19 @@ the handler will be invoked in the thread
 .IR thread ,
 but if the disposition of the signal is "stop", "continue", or "terminate",
 this action will affect the whole process.
+
+POSIX.1-2008 recommends that if an implementation detects the use
+of a thread ID after the end of its lifetime,
+.BR pthread_kill ()
+should return the error
+.BR ESRCH .
+The glibc implementation returns this error in the cases where
+an invalid thread ID can be detected.
+But note also that POSIX says that an attempt to use a thread ID whose
+lifetime has ended produces undefined behavior,
+and an attempt to use an invalid thread ID in a call to
+.BR pthread_kill ()
+can, for example, cause a segmentation fault.
 .SH SEE ALSO
 .BR kill (2)
 .BR sigaction (2),
-- 
1.9.3

