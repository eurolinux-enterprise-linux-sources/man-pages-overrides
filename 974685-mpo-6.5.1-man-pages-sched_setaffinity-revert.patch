diff -ur man-pages-overrides-6.5.1.orig/man-pages/man2/sched_setaffinity.2 man-pages-overrides-6.5.1/man-pages/man2/sched_setaffinity.2
--- man-pages-overrides-6.5.1.orig/man-pages/man2/sched_setaffinity.2	2013-09-23 20:16:58.725354328 +0200
+++ man-pages-overrides-6.5.1/man-pages/man2/sched_setaffinity.2	2013-09-23 20:18:17.508788721 +0200
@@ -213,59 +213,6 @@
 data type that is used internally by the kernel to
 represent the CPU set bit mask.
 
-The \fBcpu_set_t\fR affinity mask size provided by glibc only allows for upto
-1024 CPUs. It is possible to build Linux kernels with greater than 1024
-CPUs. Any application using the statically sized \fBcpu_set_t\fR will fail
-with \fBEINVAL\fR on such kernels. It is thus recommended that applications
-avoid using the statically sized \fBcpu_set_t\fR type, and instead dynamically
-allocate a mask using the CPU_*_S macros described in the \fBCPU_SET(3)\fR man
-page. Since it is not possible to determine ahead of time what \fBNR_CPUS\fR
-value the kernel was built with, applications must be prepared to catch
-\fBEINVAL\fR, and retry the command with a larger dynamically allocated mask.
-The example that follows illustrates portable usage.
-
-.SH EXAMPLE
-.nf
-   #define _GNU_SOURCE
-
-   #include <sched.h>
-   #include <stdio.h>
-   #include <errno.h>
-
-   int main(void)
-   {
-        cpu_set_t *mask;
-        size_t size;
-        int i;
-        int nrcpus = 1024;
-
-realloc:
-        mask = CPU_ALLOC(nrcpus);
-        size = CPU_ALLOC_SIZE(nrcpus);
-        CPU_ZERO_S(size, mask);
-        if ( sched_getaffinity(0, size, mask) == -1 ) {
-                CPU_FREE(mask);
-                if (errno == EINVAL &&
-                    nrcpus < (1024 << 8)) {
-                       nrcpus = nrcpus << 2;
-                       goto realloc;
-                }
-                perror("sched_getaffinity");
-                return -1;
-        }
-
-        for ( i = 0; i < nrcpus; i++ ) {
-                if ( CPU_ISSET_S(i, size, mask) ) {
-                        printf("CPU %d is set\\n", (i+1));
-                }
-        }
-
-        CPU_FREE(mask);
-
-        return 0;
-   }
-.fi
-
 .SH "SEE ALSO"
 .BR clone (2),
 .BR getcpu (2),
